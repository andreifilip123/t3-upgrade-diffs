diff --git a/package.json b/package.json
index 0a5c6e1..46c40d7 100644
--- a/package.json
+++ b/package.json
@@ -1,9 +1,10 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
     "build": "next build",
+    "db:push": "prisma db push",
     "dev": "next dev",
     "postinstall": "prisma generate",
     "lint": "next lint",
@@ -13,13 +14,13 @@
     "@next-auth/prisma-adapter": "^1.0.7",
     "@prisma/client": "^5.1.1",
     "@t3-oss/env-nextjs": "^0.6.0",
-    "@tanstack/react-query": "^4.29.25",
-    "@trpc/client": "^10.34.0",
-    "@trpc/next": "^10.34.0",
-    "@trpc/react-query": "^10.34.0",
-    "@trpc/server": "^10.34.0",
-    "next": "^13.4.13",
-    "next-auth": "^4.22.4",
+    "@tanstack/react-query": "^4.32.6",
+    "@trpc/client": "^10.37.1",
+    "@trpc/next": "^10.37.1",
+    "@trpc/react-query": "^10.37.1",
+    "@trpc/server": "^10.37.1",
+    "next": "^13.4.19",
+    "next-auth": "^4.23.0",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "^1.13.1",
@@ -34,7 +35,7 @@
     "@typescript-eslint/parser": "^6.3.0",
     "autoprefixer": "^10.4.14",
     "eslint": "^8.47.0",
-    "eslint-config-next": "^13.4.13",
+    "eslint-config-next": "^13.4.19",
     "postcss": "^8.4.27",
     "prettier": "^3.0.0",
     "prettier-plugin-tailwindcss": "^0.5.1",
@@ -43,6 +44,7 @@
     "typescript": "^5.1.6"
   },
   "ct3aMetadata": {
-    "initVersion": "7.19.0"
-  }
+    "initVersion": "7.20.2"
+  },
+  "packageManager": "pnpm@8.5.1"
 }
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 0001d80..935817c 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -15,9 +15,12 @@ datasource db {
 }
 
 model Example {
-    id        String   @id @default(cuid())
+    id        Int      @id @default(autoincrement())
+    name      String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
+
+    @@index([name])
 }
 
 // Necessary for Next auth
diff --git a/src/env.mjs b/src/env.mjs
index 58bc43a..1d4b16a 100644
--- a/src/env.mjs
+++ b/src/env.mjs
@@ -7,8 +7,16 @@ export const env = createEnv({
    * isn't built with invalid env vars.
    */
   server: {
-    DATABASE_URL: z.string().url(),
-    NODE_ENV: z.enum(["development", "test", "production"]),
+    DATABASE_URL: z
+      .string()
+      .url()
+      .refine(
+        (str) => !str.includes("YOUR_MYSQL_URL_HERE"),
+        "You forgot to change the default URL"
+      ),
+    NODE_ENV: z
+      .enum(["development", "test", "production"])
+      .default("development"),
     NEXTAUTH_SECRET:
       process.env.NODE_ENV === "production"
         ? z.string().min(1)
@@ -47,8 +55,8 @@ export const env = createEnv({
     DISCORD_CLIENT_SECRET: process.env.DISCORD_CLIENT_SECRET,
   },
   /**
-   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
-   * This is especially useful for Docker builds.
+   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially
+   * useful for Docker builds.
    */
   skipValidation: !!process.env.SKIP_ENV_VALIDATION,
 });
diff --git a/src/server/api/routers/example.ts b/src/server/api/routers/example.ts
index 5b9da79..ed0ce35 100644
--- a/src/server/api/routers/example.ts
+++ b/src/server/api/routers/example.ts
@@ -16,7 +16,7 @@ export const exampleRouter = createTRPCRouter({
     }),
 
   getAll: publicProcedure.query(({ ctx }) => {
-    return ctx.prisma.example.findMany();
+    return ctx.db.example.findMany();
   }),
 
   getSecretMessage: protectedProcedure.query(() => {
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index 231835d..87237ff 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -14,7 +14,7 @@ import superjson from "superjson";
 import { ZodError } from "zod";
 
 import { getServerAuthSession } from "~/server/auth";
-import { prisma } from "~/server/db";
+import { db } from "~/server/db";
 
 /**
  * 1. CONTEXT
@@ -41,7 +41,7 @@ interface CreateContextOptions {
 const createInnerTRPCContext = (opts: CreateContextOptions) => {
   return {
     session: opts.session,
-    prisma,
+    db,
   };
 };
 
diff --git a/src/server/auth.ts b/src/server/auth.ts
index f7cec72..cec71fc 100644
--- a/src/server/auth.ts
+++ b/src/server/auth.ts
@@ -8,7 +8,7 @@ import {
 import DiscordProvider from "next-auth/providers/discord";
 
 import { env } from "~/env.mjs";
-import { prisma } from "~/server/db";
+import { db } from "~/server/db";
 
 /**
  * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`
@@ -46,7 +46,7 @@ export const authOptions: NextAuthOptions = {
       },
     }),
   },
-  adapter: PrismaAdapter(prisma),
+  adapter: PrismaAdapter(db),
   providers: [
     DiscordProvider({
       clientId: env.DISCORD_CLIENT_ID,
diff --git a/src/server/db.ts b/src/server/db.ts
index 861093d..a4753ca 100644
--- a/src/server/db.ts
+++ b/src/server/db.ts
@@ -6,11 +6,11 @@ const globalForPrisma = globalThis as unknown as {
   prisma: PrismaClient | undefined;
 };
 
-export const prisma =
+export const db =
   globalForPrisma.prisma ??
   new PrismaClient({
     log:
       env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
   });
 
-if (env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
+if (env.NODE_ENV !== "production") globalForPrisma.prisma = db;
