diff --git a/next.config.mjs b/next.config.mjs
index 654e725..61964ea 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -9,8 +9,7 @@ const config = {
   reactStrictMode: true,
 
   /**
-   * If you have `experimental: { appDir: true }` set, then you must comment the below `i18n` config
-   * out.
+   * If you are using `appDir` then you must comment the below `i18n` config out.
    *
    * @see https://github.com/vercel/next.js/issues/41980
    */
diff --git a/package.json b/package.json
index eb85e21..741f9b3 100644
--- a/package.json
+++ b/package.json
@@ -1,49 +1,50 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
     "build": "next build",
+    "db:push": "prisma db push",
     "dev": "next dev",
     "postinstall": "prisma generate",
     "lint": "next lint",
     "start": "next start"
   },
   "dependencies": {
-    "@next-auth/prisma-adapter": "^1.0.5",
-    "@prisma/client": "^5.0.0",
-    "@t3-oss/env-nextjs": "^0.3.1",
-    "@tanstack/react-query": "^4.29.7",
-    "@trpc/client": "^10.26.0",
-    "@trpc/next": "^10.26.0",
-    "@trpc/react-query": "^10.26.0",
-    "@trpc/server": "^10.26.0",
-    "next": "^13.4.2",
-    "next-auth": "^4.22.1",
+    "@next-auth/prisma-adapter": "^1.0.7",
+    "@prisma/client": "^5.1.1",
+    "@t3-oss/env-nextjs": "^0.7.0",
+    "@tanstack/react-query": "^4.32.6",
+    "@trpc/client": "^10.37.1",
+    "@trpc/next": "^10.37.1",
+    "@trpc/react-query": "^10.37.1",
+    "@trpc/server": "^10.37.1",
+    "next": "^13.5.4",
+    "next-auth": "^4.23.0",
     "react": "18.2.0",
     "react-dom": "18.2.0",
-    "superjson": "1.12.2",
-    "zod": "^3.21.4"
+    "superjson": "^1.13.1",
+    "zod": "^3.22.4"
   },
   "devDependencies": {
-    "@types/eslint": "^8.37.0",
+    "@types/eslint": "^8.44.2",
     "@types/node": "^18.16.0",
-    "@types/prettier": "^2.7.2",
-    "@types/react": "^18.2.6",
-    "@types/react-dom": "^18.2.4",
-    "@typescript-eslint/eslint-plugin": "6.0.0",
-    "@typescript-eslint/parser": "6.0.0",
+    "@types/react": "^18.2.20",
+    "@types/react-dom": "^18.2.7",
+    "@typescript-eslint/eslint-plugin": "^6.3.0",
+    "@typescript-eslint/parser": "^6.3.0",
     "autoprefixer": "^10.4.14",
-    "eslint": "^8.40.0",
-    "eslint-config-next": "^13.4.2",
-    "postcss": "^8.4.21",
-    "prettier": "^2.8.8",
-    "prettier-plugin-tailwindcss": "^0.2.8",
-    "prisma": "^5.0.0",
-    "tailwindcss": "^3.3.0",
-    "typescript": "^5.0.4"
+    "eslint": "^8.47.0",
+    "eslint-config-next": "^13.5.4",
+    "postcss": "^8.4.27",
+    "prettier": "^3.0.0",
+    "prettier-plugin-tailwindcss": "^0.5.1",
+    "prisma": "^5.1.1",
+    "tailwindcss": "^3.3.3",
+    "typescript": "^5.1.6"
   },
   "ct3aMetadata": {
-    "initVersion": "7.17.0"
-  }
+    "initVersion": "7.21.0"
+  },
+  "packageManager": "pnpm@8.5.1"
 }
diff --git a/prettier.config.cjs b/prettier.config.cjs
deleted file mode 100644
index ca28ed9..0000000
--- a/prettier.config.cjs
+++ /dev/null
@@ -1,6 +0,0 @@
-/** @type {import("prettier").Config} */
-const config = {
-  plugins: [require.resolve("prettier-plugin-tailwindcss")],
-};
-
-module.exports = config;
diff --git a/prettier.config.mjs b/prettier.config.mjs
new file mode 100644
index 0000000..2d2fa4c
--- /dev/null
+++ b/prettier.config.mjs
@@ -0,0 +1,6 @@
+/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').options} */
+const config = {
+  plugins: ["prettier-plugin-tailwindcss"],
+};
+
+export default config;
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 0001d80..935817c 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -15,9 +15,12 @@ datasource db {
 }
 
 model Example {
-    id        String   @id @default(cuid())
+    id        Int      @id @default(autoincrement())
+    name      String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
+
+    @@index([name])
 }
 
 // Necessary for Next auth
diff --git a/src/env.mjs b/src/env.mjs
index 58bc43a..afde07b 100644
--- a/src/env.mjs
+++ b/src/env.mjs
@@ -7,20 +7,28 @@ export const env = createEnv({
    * isn't built with invalid env vars.
    */
   server: {
-    DATABASE_URL: z.string().url(),
-    NODE_ENV: z.enum(["development", "test", "production"]),
+    DATABASE_URL: z
+      .string()
+      .url()
+      .refine(
+        (str) => !str.includes("YOUR_MYSQL_URL_HERE"),
+        "You forgot to change the default URL"
+      ),
+    NODE_ENV: z
+      .enum(["development", "test", "production"])
+      .default("development"),
     NEXTAUTH_SECRET:
       process.env.NODE_ENV === "production"
-        ? z.string().min(1)
-        : z.string().min(1).optional(),
+        ? z.string()
+        : z.string().optional(),
     NEXTAUTH_URL: z.preprocess(
       // This makes Vercel deployments not fail if you don't set NEXTAUTH_URL
       // Since NextAuth.js automatically uses the VERCEL_URL if present.
       (str) => process.env.VERCEL_URL ?? str,
       // VERCEL_URL doesn't include `https` so it cant be validated as a URL
-      process.env.VERCEL ? z.string().min(1) : z.string().url()
+      process.env.VERCEL ? z.string() : z.string().url()
     ),
-    // Add `.min(1) on ID and SECRET if you want to make sure they're not empty
+    // Add ` on ID and SECRET if you want to make sure they're not empty
     DISCORD_CLIENT_ID: z.string(),
     DISCORD_CLIENT_SECRET: z.string(),
   },
@@ -31,7 +39,7 @@ export const env = createEnv({
    * `NEXT_PUBLIC_`.
    */
   client: {
-    // NEXT_PUBLIC_CLIENTVAR: z.string().min(1),
+    // NEXT_PUBLIC_CLIENTVAR: z.string(),
   },
 
   /**
@@ -47,8 +55,13 @@ export const env = createEnv({
     DISCORD_CLIENT_SECRET: process.env.DISCORD_CLIENT_SECRET,
   },
   /**
-   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
-   * This is especially useful for Docker builds.
+   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially
+   * useful for Docker builds.
    */
   skipValidation: !!process.env.SKIP_ENV_VALIDATION,
+  /**
+   * Makes it so that empty strings are treated as undefined.
+   * `SOME_VAR: z.string()` and `SOME_VAR=''` will throw an error.
+   */
+  emptyStringAsUndefined: true,
 });
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index e319df4..af22fb4 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -1,7 +1,9 @@
 import { type Session } from "next-auth";
 import { SessionProvider } from "next-auth/react";
 import { type AppType } from "next/app";
+
 import { api } from "~/utils/api";
+
 import "~/styles/globals.css";
 
 const MyApp: AppType<{ session: Session | null }> = ({
diff --git a/src/pages/api/auth/[...nextauth].ts b/src/pages/api/auth/[...nextauth].ts
index 8aefbb6..8739530 100644
--- a/src/pages/api/auth/[...nextauth].ts
+++ b/src/pages/api/auth/[...nextauth].ts
@@ -1,4 +1,5 @@
 import NextAuth from "next-auth";
+
 import { authOptions } from "~/server/auth";
 
 export default NextAuth(authOptions);
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
index 6c53746..af81d92 100644
--- a/src/pages/api/trpc/[trpc].ts
+++ b/src/pages/api/trpc/[trpc].ts
@@ -1,4 +1,5 @@
 import { createNextApiHandler } from "@trpc/server/adapters/next";
+
 import { env } from "~/env.mjs";
 import { appRouter } from "~/server/api/root";
 import { createTRPCContext } from "~/server/api/trpc";
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 622d15f..abaae58 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -1,6 +1,7 @@
 import { signIn, signOut, useSession } from "next-auth/react";
 import Head from "next/head";
 import Link from "next/link";
+
 import { api } from "~/utils/api";
 
 export default function Home() {
@@ -13,7 +14,7 @@ export default function Home() {
         <meta name="description" content="Generated by create-t3-app" />
         <link rel="icon" href="/favicon.ico" />
       </Head>
-      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
+      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
         <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
           <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
             Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
diff --git a/src/server/api/routers/example.ts b/src/server/api/routers/example.ts
index fbb066a..ed0ce35 100644
--- a/src/server/api/routers/example.ts
+++ b/src/server/api/routers/example.ts
@@ -1,8 +1,9 @@
 import { z } from "zod";
+
 import {
   createTRPCRouter,
-  publicProcedure,
   protectedProcedure,
+  publicProcedure,
 } from "~/server/api/trpc";
 
 export const exampleRouter = createTRPCRouter({
@@ -15,7 +16,7 @@ export const exampleRouter = createTRPCRouter({
     }),
 
   getAll: publicProcedure.query(({ ctx }) => {
-    return ctx.prisma.example.findMany();
+    return ctx.db.example.findMany();
   }),
 
   getSecretMessage: protectedProcedure.query(() => {
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index b044d0d..87237ff 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -12,8 +12,9 @@ import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
 import { type Session } from "next-auth";
 import superjson from "superjson";
 import { ZodError } from "zod";
+
 import { getServerAuthSession } from "~/server/auth";
-import { prisma } from "~/server/db";
+import { db } from "~/server/db";
 
 /**
  * 1. CONTEXT
@@ -40,7 +41,7 @@ interface CreateContextOptions {
 const createInnerTRPCContext = (opts: CreateContextOptions) => {
   return {
     session: opts.session,
-    prisma,
+    db,
   };
 };
 
diff --git a/src/server/auth.ts b/src/server/auth.ts
index c20057e..cec71fc 100644
--- a/src/server/auth.ts
+++ b/src/server/auth.ts
@@ -2,12 +2,13 @@ import { PrismaAdapter } from "@next-auth/prisma-adapter";
 import { type GetServerSidePropsContext } from "next";
 import {
   getServerSession,
-  type NextAuthOptions,
   type DefaultSession,
+  type NextAuthOptions,
 } from "next-auth";
 import DiscordProvider from "next-auth/providers/discord";
+
 import { env } from "~/env.mjs";
-import { prisma } from "~/server/db";
+import { db } from "~/server/db";
 
 /**
  * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`
@@ -45,7 +46,7 @@ export const authOptions: NextAuthOptions = {
       },
     }),
   },
-  adapter: PrismaAdapter(prisma),
+  adapter: PrismaAdapter(db),
   providers: [
     DiscordProvider({
       clientId: env.DISCORD_CLIENT_ID,
diff --git a/src/server/db.ts b/src/server/db.ts
index 87ece8b..a4753ca 100644
--- a/src/server/db.ts
+++ b/src/server/db.ts
@@ -1,15 +1,16 @@
 import { PrismaClient } from "@prisma/client";
+
 import { env } from "~/env.mjs";
 
 const globalForPrisma = globalThis as unknown as {
   prisma: PrismaClient | undefined;
 };
 
-export const prisma =
+export const db =
   globalForPrisma.prisma ??
   new PrismaClient({
     log:
       env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
   });
 
-if (env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
+if (env.NODE_ENV !== "production") globalForPrisma.prisma = db;
diff --git a/src/utils/api.ts b/src/utils/api.ts
index b2d5afd..f4f4ad5 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -8,6 +8,7 @@ import { httpBatchLink, loggerLink } from "@trpc/client";
 import { createTRPCNext } from "@trpc/next";
 import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
 import superjson from "superjson";
+
 import { type AppRouter } from "~/server/api/root";
 
 const getBaseUrl = () => {
