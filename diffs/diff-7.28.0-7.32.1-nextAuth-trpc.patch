diff --git a/.eslintrc.cjs b/.eslintrc.cjs
index c946e46..a92fb0b 100644
--- a/.eslintrc.cjs
+++ b/.eslintrc.cjs
@@ -1,37 +1,42 @@
 /** @type {import("eslint").Linter.Config} */
 const config = {
-  parser: "@typescript-eslint/parser",
-  parserOptions: {
-    project: true,
+  "parser": "@typescript-eslint/parser",
+  "parserOptions": {
+    "project": true
   },
-  plugins: ["@typescript-eslint"],
-  extends: [
+  "plugins": [
+    "@typescript-eslint"
+  ],
+  "extends": [
     "next/core-web-vitals",
     "plugin:@typescript-eslint/recommended-type-checked",
-    "plugin:@typescript-eslint/stylistic-type-checked",
+    "plugin:@typescript-eslint/stylistic-type-checked"
   ],
-  rules: {
-    // These opinionated rules are enabled in stylistic-type-checked above.
-    // Feel free to reconfigure them to your own preference.
+  "rules": {
     "@typescript-eslint/array-type": "off",
     "@typescript-eslint/consistent-type-definitions": "off",
-
     "@typescript-eslint/consistent-type-imports": [
       "warn",
       {
-        prefer: "type-imports",
-        fixStyle: "inline-type-imports",
-      },
+        "prefer": "type-imports",
+        "fixStyle": "inline-type-imports"
+      }
+    ],
+    "@typescript-eslint/no-unused-vars": [
+      "warn",
+      {
+        "argsIgnorePattern": "^_"
+      }
     ],
-    "@typescript-eslint/no-unused-vars": ["warn", { argsIgnorePattern: "^_" }],
     "@typescript-eslint/require-await": "off",
     "@typescript-eslint/no-misused-promises": [
       "error",
       {
-        checksVoidReturn: { attributes: false },
-      },
-    ],
-  },
-};
-
-module.exports = config;
+        "checksVoidReturn": {
+          "attributes": false
+        }
+      }
+    ]
+  }
+}
+module.exports = config;
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index 2971a0b..9b986df 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,6 +11,7 @@
 # database
 /prisma/db.sqlite
 /prisma/db.sqlite-journal
+db.sqlite
 
 # next.js
 /.next/
diff --git a/package.json b/package.json
index 7e74d27..40a1cb3 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "type": "module",
@@ -10,32 +10,32 @@
     "start": "next start"
   },
   "dependencies": {
-    "@t3-oss/env-nextjs": "^0.9.2",
-    "@tanstack/react-query": "^4.36.1",
-    "@trpc/client": "^10.45.1",
-    "@trpc/next": "^10.45.1",
-    "@trpc/react-query": "^10.45.1",
-    "@trpc/server": "^10.45.1",
-    "next": "^14.1.0",
+    "@t3-oss/env-nextjs": "^0.10.1",
+    "@tanstack/react-query": "^5.25.0",
+    "@trpc/client": "next",
+    "@trpc/next": "next",
+    "@trpc/react-query": "next",
+    "@trpc/server": "next",
+    "next": "^14.2.1",
     "next-auth": "^4.24.6",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "^2.2.1",
-    "zod": "^3.22.4"
+    "zod": "^3.23.3"
   },
   "devDependencies": {
     "@types/eslint": "^8.56.2",
     "@types/node": "^20.11.20",
     "@types/react": "^18.2.57",
     "@types/react-dom": "^18.2.19",
-    "@typescript-eslint/eslint-plugin": "^7.0.2",
-    "@typescript-eslint/parser": "^7.0.2",
-    "eslint": "^8.56.0",
-    "eslint-config-next": "^14.1.0",
-    "typescript": "^5.3.3"
+    "@typescript-eslint/eslint-plugin": "^7.1.1",
+    "@typescript-eslint/parser": "^7.1.1",
+    "eslint": "^8.57.0",
+    "eslint-config-next": "^14.1.3",
+    "typescript": "^5.4.2"
   },
   "ct3aMetadata": {
-    "initVersion": "7.28.0"
+    "initVersion": "7.32.1"
   },
   "packageManager": "pnpm@8.5.1"
 }
diff --git a/src/server/api/root.ts b/src/server/api/root.ts
index 3d629a7..b341fc4 100644
--- a/src/server/api/root.ts
+++ b/src/server/api/root.ts
@@ -1,5 +1,5 @@
 import { postRouter } from "~/server/api/routers/post";
-import { createTRPCRouter } from "~/server/api/trpc";
+import { createCallerFactory, createTRPCRouter } from "~/server/api/trpc";
 
 /**
  * This is the primary router for your server.
@@ -12,3 +12,12 @@ export const appRouter = createTRPCRouter({
 
 // export type definition of API
 export type AppRouter = typeof appRouter;
+
+/**
+ * Create a server-side caller for the tRPC API.
+ * @example
+ * const trpc = createCaller(createContext);
+ * const res = await trpc.post.all();
+ *       ^? Post[]
+ */
+export const createCaller = createCallerFactory(appRouter);
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index d4c3b51..fc64816 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -82,6 +82,13 @@ const t = initTRPC.context<typeof createTRPCContext>().create({
   },
 });
 
+/**
+ * Create a server-side caller.
+ *
+ * @see https://trpc.io/docs/server/server-side-calls
+ */
+export const createCallerFactory = t.createCallerFactory;
+
 /**
  * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
  *
diff --git a/src/utils/api.ts b/src/utils/api.ts
index f4f4ad5..0f03d30 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -21,13 +21,6 @@ const getBaseUrl = () => {
 export const api = createTRPCNext<AppRouter>({
   config() {
     return {
-      /**
-       * Transformer used for data de-serialization from the server.
-       *
-       * @see https://trpc.io/docs/data-transformers
-       */
-      transformer: superjson,
-
       /**
        * Links used to determine request flow from client to server.
        *
@@ -40,6 +33,12 @@ export const api = createTRPCNext<AppRouter>({
             (opts.direction === "down" && opts.result instanceof Error),
         }),
         httpBatchLink({
+          /**
+           * Transformer used for data de-serialization from the server.
+           *
+           * @see https://trpc.io/docs/data-transformers
+           */
+          transformer: superjson,
           url: `${getBaseUrl()}/api/trpc`,
         }),
       ],
@@ -51,6 +50,7 @@ export const api = createTRPCNext<AppRouter>({
    * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false
    */
   ssr: false,
+  transformer: superjson,
 });
 
 /**
