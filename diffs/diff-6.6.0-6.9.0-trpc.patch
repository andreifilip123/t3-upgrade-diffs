diff --git a/package.json b/package.json
index 0634808..8f6cdaf 100644
--- a/package.json
+++ b/package.json
@@ -1,30 +1,36 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
-    "dev": "next dev",
     "build": "next build",
-    "start": "next start",
-    "lint": "next lint"
+    "dev": "next dev",
+    "lint": "next lint",
+    "start": "next start"
   },
   "dependencies": {
-    "next": "13.0.0",
+    "@tanstack/react-query": "^4.10.0",
+    "@trpc/client": "10.0.0-rc.4",
+    "@trpc/next": "10.0.0-rc.4",
+    "@trpc/react-query": "10.0.0-rc.4",
+    "@trpc/server": "10.0.0-rc.4",
+    "next": "13.0.2",
     "react": "18.2.0",
     "react-dom": "18.2.0",
+    "superjson": "1.9.1",
     "zod": "^3.18.0"
   },
   "devDependencies": {
-    "@types/node": "18.0.0",
-    "@types/react": "18.0.14",
-    "@types/react-dom": "18.0.5",
+    "@types/node": "^18.0.0",
+    "@types/react": "^18.0.14",
+    "@types/react-dom": "^18.0.5",
     "@typescript-eslint/eslint-plugin": "^5.33.0",
     "@typescript-eslint/parser": "^5.33.0",
-    "eslint": "8.22.0",
-    "eslint-config-next": "13.0.0",
+    "eslint": "^8.26.0",
+    "eslint-config-next": "13.0.2",
     "typescript": "^4.8.4"
   },
   "ct3aMetadata": {
-    "initVersion": "6.6.0"
+    "initVersion": "6.9.0"
   }
 }
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index adea8e0..93ad12b 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -1,4 +1,6 @@
-import { type AppType } from "next/dist/shared/lib/utils";
+import { type AppType } from "next/app";
+
+import { trpc } from "../utils/trpc";
 
 import "../styles/globals.css";
 
@@ -6,4 +8,4 @@ const MyApp: AppType = ({ Component, pageProps }) => {
   return <Component {...pageProps} />;
 };
 
-export default MyApp;
+export default trpc.withTRPC(MyApp);
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
new file mode 100644
index 0000000..f69201d
--- /dev/null
+++ b/src/pages/api/trpc/[trpc].ts
@@ -0,0 +1,17 @@
+import { createNextApiHandler } from "@trpc/server/adapters/next";
+
+import { env } from "../../../env/server.mjs";
+import { createContext } from "../../../server/trpc/context";
+import { appRouter } from "../../../server/trpc/router/_app";
+
+// export API handler
+export default createNextApiHandler({
+  router: appRouter,
+  createContext,
+  onError:
+    env.NODE_ENV === "development"
+      ? ({ path, error }) => {
+          console.error(`❌ tRPC failed on ${path}: ${error}`);
+        }
+      : undefined,
+});
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 5240025..b6b41c8 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -2,9 +2,13 @@ import { type NextPage } from "next";
 import Head from "next/head";
 import Link from "next/link";
 
+import { trpc } from "../utils/trpc";
+
 import styles from "./index.module.css";
 
 const Home: NextPage = () => {
+  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
+
   return (
     <>
       <Head>
@@ -51,6 +55,10 @@ const Home: NextPage = () => {
               documentation="https://www.prisma.io/docs/"
             />
           </div>
+
+          <div className={styles.helloFrom}>
+            {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading...</p>}
+          </div>
         </div>
       </div>
     </>
@@ -65,11 +73,11 @@ type TechnologyCardProps = {
   documentation: string;
 };
 
-const TechnologyCard = ({
+const TechnologyCard: React.FC<TechnologyCardProps> = ({
   name,
   description,
   documentation,
-}: TechnologyCardProps) => {
+}) => {
   return (
     <section className={styles.card}>
       <h2 className={styles.cardTitle}>{name}</h2>
diff --git a/src/server/trpc/context.ts b/src/server/trpc/context.ts
new file mode 100644
index 0000000..62a977b
--- /dev/null
+++ b/src/server/trpc/context.ts
@@ -0,0 +1,26 @@
+import { type inferAsyncReturnType } from "@trpc/server";
+import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
+
+/**
+ * Replace this with an object if you want to pass things to createContextInner
+ */
+type CreateContextOptions = Record<string, never>;
+
+/** Use this helper for:
+ * - testing, so we dont have to mock Next.js' req/res
+ * - trpc's `createSSGHelpers` where we don't have req/res
+ * @see https://beta.create.t3.gg/en/usage/trpc#-servertrpccontextts
+ **/
+export const createContextInner = async (opts: CreateContextOptions) => {
+  return {};
+};
+
+/**
+ * This is the actual context you'll use in your router
+ * @link https://trpc.io/docs/context
+ **/
+export const createContext = async (opts: CreateNextContextOptions) => {
+  return await createContextInner({});
+};
+
+export type Context = inferAsyncReturnType<typeof createContext>;
diff --git a/src/server/trpc/router/_app.ts b/src/server/trpc/router/_app.ts
new file mode 100644
index 0000000..673135d
--- /dev/null
+++ b/src/server/trpc/router/_app.ts
@@ -0,0 +1,9 @@
+import { router } from "../trpc";
+import { exampleRouter } from "./example";
+
+export const appRouter = router({
+  example: exampleRouter,
+});
+
+// export type definition of API
+export type AppRouter = typeof appRouter;
diff --git a/src/server/trpc/router/example.ts b/src/server/trpc/router/example.ts
new file mode 100644
index 0000000..086a723
--- /dev/null
+++ b/src/server/trpc/router/example.ts
@@ -0,0 +1,13 @@
+import { z } from "zod";
+
+import { router, publicProcedure } from "../trpc";
+
+export const exampleRouter = router({
+  hello: publicProcedure
+    .input(z.object({ text: z.string().nullish() }).nullish())
+    .query(({ input }) => {
+      return {
+        greeting: `Hello ${input?.text ?? "world"}`,
+      };
+    }),
+});
diff --git a/src/server/trpc/trpc.ts b/src/server/trpc/trpc.ts
new file mode 100644
index 0000000..b4a9527
--- /dev/null
+++ b/src/server/trpc/trpc.ts
@@ -0,0 +1,15 @@
+import { initTRPC } from "@trpc/server";
+import superjson from "superjson";
+
+import { type Context } from "./context";
+
+const t = initTRPC.context<Context>().create({
+  transformer: superjson,
+  errorFormatter({ shape }) {
+    return shape;
+  },
+});
+
+export const router = t.router;
+
+export const publicProcedure = t.procedure;
diff --git a/src/utils/trpc.ts b/src/utils/trpc.ts
new file mode 100644
index 0000000..2391cbc
--- /dev/null
+++ b/src/utils/trpc.ts
@@ -0,0 +1,42 @@
+import { httpBatchLink, loggerLink } from "@trpc/client";
+import { createTRPCNext } from "@trpc/next";
+import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
+import superjson from "superjson";
+
+import { type AppRouter } from "../server/trpc/router/_app";
+
+const getBaseUrl = () => {
+  if (typeof window !== "undefined") return ""; // browser should use relative url
+  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`; // SSR should use vercel url
+  return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
+};
+
+export const trpc = createTRPCNext<AppRouter>({
+  config() {
+    return {
+      transformer: superjson,
+      links: [
+        loggerLink({
+          enabled: (opts) =>
+            process.env.NODE_ENV === "development" ||
+            (opts.direction === "down" && opts.result instanceof Error),
+        }),
+        httpBatchLink({
+          url: `${getBaseUrl()}/api/trpc`,
+        }),
+      ],
+    };
+  },
+  ssr: false,
+});
+
+/**
+ * Inference helper for inputs
+ * @example type HelloInput = RouterInputs['example']['hello']
+ **/
+export type RouterInputs = inferRouterInputs<AppRouter>;
+/**
+ * Inference helper for outputs
+ * @example type HelloOutput = RouterOutputs['example']['hello']
+ **/
+export type RouterOutputs = inferRouterOutputs<AppRouter>;
