diff --git a/.env-example b/.env-example
deleted file mode 100644
index b48d7cb..0000000
--- a/.env-example
+++ /dev/null
@@ -1,13 +0,0 @@
-# Note that not all variables here might be in use for your selected configuration
-# When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
-
-# Prisma
-DATABASE_URL=file:./db.sqlite
-
-# Next Auth
-NEXTAUTH_SECRET=
-NEXTAUTH_URL=http://localhost:3000
-
-# Next Auth Discord Provider
-DISCORD_CLIENT_ID=
-DISCORD_CLIENT_SECRET=
diff --git a/.eslintrc.json b/.eslintrc.json
index 1cd4470..4cc0a95 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -4,5 +4,8 @@
     "project": "./tsconfig.json"
   },
   "plugins": ["@typescript-eslint"],
-  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"]
+  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
+  "rules": {
+    "@typescript-eslint/consistent-type-imports": "warn"
+  }
 }
diff --git a/README.md b/README.md
index 5570989..d7c5b20 100644
--- a/README.md
+++ b/README.md
@@ -2,12 +2,6 @@
 
 This is an app bootstrapped according to the [init.tips](https://init.tips) stack, also known as the T3-Stack.
 
-## Why are there `.js` files in here?
-
-As per [T3-Axiom #3](https://github.com/t3-oss/create-t3-app/tree/next#3-typesafety-isnt-optional), we take typesafety as a first class citizen. Unfortunately, not all frameworks and plugins support TypeScript which means some of the configuration files have to be `.js` files.
-
-We try to emphasize that these files are javascript for a reason, by explicitly declaring its type (`cjs` or `mjs`) depending on what's supported by the library it is used by. Also, all the `js` files in this project are still typechecked using a `@ts-check` comment at the top.
-
 ## What's next? How do I make an app with this?
 
 We try to keep this project as simple as possible, so you can start with the most basic configuration and then move on to more advanced configuration.
@@ -17,7 +11,9 @@ If you are not familiar with the different technologies used in this project, pl
 - [Next-Auth.js](https://next-auth.js.org)
 - [Prisma](https://prisma.io)
 - [TailwindCSS](https://tailwindcss.com)
-- [tRPC](https://trpc.io) (using @next version? [see v10 docs here](https://trpc.io/docs/v10/))
+- [tRPC](https://trpc.io)
+
+We also [roll our own docs](https://beta.create.t3.gg) with some summary information and links to the respective documentation.
 
 Also checkout these awesome tutorials on `create-t3-app`.
 
@@ -28,201 +24,4 @@ Also checkout these awesome tutorials on `create-t3-app`.
 
 ## How do I deploy this?
 
-### Vercel
-
-We recommend deploying to [Vercel](https://vercel.com/?utm_source=t3-oss&utm_campaign=oss). It makes it super easy to deploy NextJs apps.
-
-- Push your code to a GitHub repository.
-- Go to [Vercel](https://vercel.com/?utm_source=t3-oss&utm_campaign=oss) and sign up with GitHub.
-- Create a Project and import the repository you pushed your code to.
-- Add your environment variables.
-- Click **Deploy**
-- Now whenever you push a change to your repository, Vercel will automatically redeploy your website!
-
-### Docker
-
-You can also dockerize this stack and deploy a container.
-
-Please note that Next.js requires a different process for buildtime (available in the frontend, prefixed by `NEXT_PUBLIC`) and runtime environment, server-side only, variables. In this demo we are using two variables, `DATABASE_URL` (used by the server) and `NEXT_PUBLIC_CLIENTVAR` (used by the client). Pay attention to their positions in the `Dockerfile`, command-line arguments, and `docker-compose.yml`.
-
-1. In your [next.config.mjs](./next.config.mjs), add the `standalone` output-option to your config:
-
-   ```diff
-     export default defineNextConfig({
-       reactStrictMode: true,
-       swcMinify: true,
-   +   output: "standalone",
-     });
-   ```
-
-2. Remove the `env`-import from [next.config.mjs](./next.config.mjs):
-
-   ```diff
-   - import { env } from "./src/env/server.mjs";
-   ```
-
-3. Create a `.dockerignore` file with the following contents:
-   <details>
-   <summary>.dockerignore</summary>
-
-   ```
-   .env
-   Dockerfile
-   .dockerignore
-   node_modules
-   npm-debug.log
-   README.md
-   .next
-   .git
-   ```
-
-  </details>
-
-4. Create a `Dockerfile` with the following contents:
-   <details>
-   <summary>Dockerfile</summary>
-
-   ```Dockerfile
-   ########################
-   #         DEPS         #
-   ########################
-
-   # Install dependencies only when needed
-   # TODO: re-evaluate if emulation is still necessary on arm64 after moving to node 18
-   FROM --platform=linux/amd64 node:16-alpine AS deps
-   # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
-   RUN apk add --no-cache libc6-compat openssl
-   WORKDIR /app
-
-   # Install Prisma Client - remove if not using Prisma
-   COPY prisma ./
-
-   # Install dependencies based on the preferred package manager
-   COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
-   RUN \
-     if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
-     elif [ -f package-lock.json ]; then npm ci; \
-     elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
-     else echo "Lockfile not found." && exit 1; \
-     fi
-
-   ########################
-   #        BUILDER       #
-   ########################
-
-   # Rebuild the source code only when needed
-   # TODO: re-evaluate if emulation is still necessary on arm64 after moving to node 18
-   FROM --platform=linux/amd64 node:16-alpine AS builder
-
-   ARG DATABASE_URL
-   ARG NEXT_PUBLIC_CLIENTVAR
-
-   WORKDIR /app
-   COPY --from=deps /app/node_modules ./node_modules
-   COPY . .
-
-   # Next.js collects completely anonymous telemetry data about general usage.
-   # Learn more here: https://nextjs.org/telemetry
-   # Uncomment the following line in case you want to disable telemetry during the build.
-   # ENV NEXT_TELEMETRY_DISABLED 1
-
-   RUN \
-     if [ -f yarn.lock ]; then yarn build; \
-     elif [ -f package-lock.json ]; then npm run build; \
-     elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm run build; \
-     else echo "Lockfile not found." && exit 1; \
-     fi
-
-   ########################
-   #        RUNNER        #
-   ########################
-
-   # Production image, copy all the files and run next
-   # TODO: re-evaluate if emulation is still necessary after moving to node 18
-   FROM --platform=linux/amd64 node:16-alpine AS runner
-   # WORKDIR /usr/app
-   WORKDIR /app
-
-   ENV NODE_ENV production
-   # Uncomment the following line in case you want to disable telemetry during runtime.
-   # ENV NEXT_TELEMETRY_DISABLED 1
-
-   RUN addgroup --system --gid 1001 nodejs
-   RUN adduser --system --uid 1001 nextjs
-
-   COPY --from=builder /app/next.config.mjs ./
-   COPY --from=builder /app/public ./public
-   COPY --from=builder /app/package.json ./package.json
-
-   # Automatically leverage output traces to reduce image size
-   # https://nextjs.org/docs/advanced-features/output-file-tracing
-   COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
-   COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
-
-   USER nextjs
-
-   EXPOSE 3000
-
-   ENV PORT 3000
-
-   CMD ["node", "server.js"]
-   ```
-
-  </details>
-
-5. To build and run this image locally, run:
-
-   ```bash
-   docker build -t ct3a -e NEXT_PUBLIC_CLIENTVAR=clientvar .
-   docker run -p 3000:3000 -e DATABASE_URL="database_url_goes_here" ct3a
-   ```
-
-6. You can also use a PaaS such as [Railway's](https://railway.app) automated [Dockerfile deployments](https://docs.railway.app/deploy/dockerfiles) to deploy your app.
-
-### Docker Compose
-
-You can also use docker compose to build the image and run the container.
-
-1. Follow steps 1-4 above
-
-2. Create a `docker-compose.yml` file with the following:
-
-   <details>
-   <summary>docker-compose.yml</summary>
-
-   ```yaml
-   version: "3.9"
-   services:
-     app:
-       platform: "linux/amd64"
-       build:
-         context: .
-         dockerfile: Dockerfile
-         args:
-           NEXT_PUBLIC_CLIENTVAR: "clientvar"
-       working_dir: /app
-       ports:
-         - "3000:3000"
-       image: t3-app
-       environment:
-         - DATABASE_URL=database_url_goes_here
-   ```
-
-   </details>
-
-3. Run this using `docker compose up`.
-
-### Further reading
-
-Here are some useful references you can further look into:
-
-- [Dockerfile reference](https://docs.docker.com/engine/reference/builder/)
-- [Compose file version 3 reference](https://docs.docker.com/compose/compose-file/compose-file-v3/)
-- [Docker CLI reference](https://docs.docker.com/engine/reference/commandline/docker/)
-- [Docker Compose CLI reference](https://docs.docker.com/compose/reference/)
-
-## Useful resources
-
-Here are some resources that we commonly refer to:
-
-- [Protecting routes with Next-Auth.js](https://next-auth.js.org/configuration/nextjs#unstable_getserversession)
+Follow our deployment guides for [Vercel](https://beta.create.t3.gg/en/deployment/vercel) and [Docker](https://beta.create.t3.gg/en/deployment/docker) for more information.
diff --git a/next.config.mjs b/next.config.mjs
index d5988e7..b5bef6c 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -1,23 +1,17 @@
-import { env } from "./src/env/server.mjs";
-
+// @ts-check
 /**
- * Don't be scared of the generics here.
- * All they do is to give us autocompletion when using this.
- *
- * @template {import('next').NextConfig} T
- * @param {T} config - A generic parameter that flows through to the return type
- * @constraint {{import('next').NextConfig}}
+ * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
+ * This is especially useful for Docker builds.
  */
-function defineNextConfig(config) {
-  return config;
-}
+!process.env.SKIP_ENV_VALIDATION && (await import("./src/env/server.mjs"));
 
-export default defineNextConfig({
+/** @type {import("next").NextConfig} */
+const config = {
   reactStrictMode: true,
   swcMinify: true,
-  // Next.js i18n docs: https://nextjs.org/docs/advanced-features/i18n-routing
   i18n: {
     locales: ["en"],
     defaultLocale: "en",
   },
-});
+};
+export default config;
diff --git a/package.json b/package.json
index 4636351..2b8b797 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -9,7 +9,7 @@
     "lint": "next lint"
   },
   "dependencies": {
-    "next": "12.3.1",
+    "next": "13.0.0",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "zod": "^3.18.0"
@@ -21,10 +21,10 @@
     "@typescript-eslint/eslint-plugin": "^5.33.0",
     "@typescript-eslint/parser": "^5.33.0",
     "eslint": "8.22.0",
-    "eslint-config-next": "12.3.1",
-    "typescript": "4.7.4"
+    "eslint-config-next": "13.0.0",
+    "typescript": "^4.8.4"
   },
   "ct3aMetadata": {
-    "initVersion": "5.13.0"
+    "initVersion": "6.6.0"
   }
 }
diff --git a/public/favicon.ico b/public/favicon.ico
index d3b456c..efd76f1 100644
Binary files a/public/favicon.ico and b/public/favicon.ico differ
diff --git a/src/env/client.mjs b/src/env/client.mjs
index f64d931..30958cb 100644
--- a/src/env/client.mjs
+++ b/src/env/client.mjs
@@ -14,7 +14,7 @@ export const formatErrors = (
     })
     .filter(Boolean);
 
-if (_clientEnv.success === false) {
+if (!_clientEnv.success) {
   console.error(
     "❌ Invalid environment variables:\n",
     ...formatErrors(_clientEnv.error.format()),
@@ -22,9 +22,6 @@ if (_clientEnv.success === false) {
   throw new Error("Invalid environment variables");
 }
 
-/**
- * Validate that client-side environment variables are exposed to the client.
- */
 for (let key of Object.keys(_clientEnv.data)) {
   if (!key.startsWith("NEXT_PUBLIC_")) {
     console.warn(
diff --git a/src/env/server.mjs b/src/env/server.mjs
index 22c6983..736e3a6 100644
--- a/src/env/server.mjs
+++ b/src/env/server.mjs
@@ -8,7 +8,7 @@ import { env as clientEnv, formatErrors } from "./client.mjs";
 
 const _serverEnv = serverSchema.safeParse(process.env);
 
-if (_serverEnv.success === false) {
+if (!_serverEnv.success) {
   console.error(
     "❌ Invalid environment variables:\n",
     ...formatErrors(_serverEnv.error.format()),
@@ -16,9 +16,6 @@ if (_serverEnv.success === false) {
   throw new Error("Invalid environment variables");
 }
 
-/**
- * Validate that server-side environment variables are not exposed to the client.
- */
 for (let key of Object.keys(_serverEnv.data)) {
   if (key.startsWith("NEXT_PUBLIC_")) {
     console.warn("❌ You are exposing a server-side env-variable:", key);
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index c1c9d2f..adea8e0 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -1,5 +1,6 @@
+import { type AppType } from "next/dist/shared/lib/utils";
+
 import "../styles/globals.css";
-import type { AppType } from "next/dist/shared/lib/utils";
 
 const MyApp: AppType = ({ Component, pageProps }) => {
   return <Component {...pageProps} />;
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 173337b..5240025 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -1,5 +1,7 @@
-import type { NextPage } from "next";
+import { type NextPage } from "next";
 import Head from "next/head";
+import Link from "next/link";
+
 import styles from "./index.module.css";
 
 const Home: NextPage = () => {
@@ -72,14 +74,14 @@ const TechnologyCard = ({
     <section className={styles.card}>
       <h2 className={styles.cardTitle}>{name}</h2>
       <p className={styles.cardDescription}>{description}</p>
-      <a
+      <Link
         className={styles.cardDocumentation}
         href={documentation}
         target="_blank"
         rel="noreferrer"
       >
         Documentation
-      </a>
+      </Link>
     </section>
   );
 };
diff --git a/tsconfig.json b/tsconfig.json
index 0608fd0..658068a 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,6 +1,6 @@
 {
   "compilerOptions": {
-    "target": "es5",
+    "target": "es2017",
     "lib": ["dom", "dom.iterable", "esnext"],
     "allowJs": true,
     "skipLibCheck": true,
