diff --git a/.env-example b/.env-example
deleted file mode 100644
index b48d7cb..0000000
--- a/.env-example
+++ /dev/null
@@ -1,13 +0,0 @@
-# Note that not all variables here might be in use for your selected configuration
-# When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
-
-# Prisma
-DATABASE_URL=file:./db.sqlite
-
-# Next Auth
-NEXTAUTH_SECRET=
-NEXTAUTH_URL=http://localhost:3000
-
-# Next Auth Discord Provider
-DISCORD_CLIENT_ID=
-DISCORD_CLIENT_SECRET=
diff --git a/.env.example b/.env.example
new file mode 100644
index 0000000..96d6793
--- /dev/null
+++ b/.env.example
@@ -0,0 +1,10 @@
+# Since .env is gitignored, you can use .env.example to build a new `.env` file when you clone the repo.
+# Keep this file up-to-date when you add new variables to `.env`.
+
+# This file will be committed to version control, so make sure not to have any secrets in it.
+# If you are cloning this repo, create a copy of this file named `.env` and populate it with your secrets.
+
+# When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
+
+# Prisma
+DATABASE_URL=file:./db.sqlite
diff --git a/.eslintrc.json b/.eslintrc.json
index 1cd4470..4cc0a95 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -4,5 +4,8 @@
     "project": "./tsconfig.json"
   },
   "plugins": ["@typescript-eslint"],
-  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"]
+  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
+  "rules": {
+    "@typescript-eslint/consistent-type-imports": "warn"
+  }
 }
diff --git a/.gitignore b/.gitignore
index d9bbc5d..2971a0b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,7 @@
 # next.js
 /.next/
 /out/
+next-env.d.ts
 
 # production
 /build
@@ -30,6 +31,7 @@ yarn-error.log*
 .pnpm-debug.log*
 
 # local env files
+# do not commit any .env files to git, except for the .env.example file. https://create.t3.gg/en/usage/env-variables#using-environment-variables
 .env
 .env*.local
 
diff --git a/README.md b/README.md
index dea45cb..cc40526 100644
--- a/README.md
+++ b/README.md
@@ -1,228 +1,28 @@
 # Create T3 App
 
-This is an app bootstrapped according to the [init.tips](https://init.tips) stack, also known as the T3-Stack.
-
-## Why are there `.js` files in here?
-
-As per [T3-Axiom #3](https://github.com/t3-oss/create-t3-app/tree/next#3-typesafety-isnt-optional), we take typesafety as a first class citizen. Unfortunately, not all frameworks and plugins support TypeScript which means some of the configuration files have to be `.js` files.
-
-We try to emphasize that these files are javascript for a reason, by explicitly declaring its type (`cjs` or `mjs`) depending on what's supported by the library it is used by. Also, all the `js` files in this project are still typechecked using a `@ts-check` comment at the top.
+This is a [T3 Stack](https://create.t3.gg/) project bootstrapped with `create-t3-app`.
 
 ## What's next? How do I make an app with this?
 
-We try to keep this project as simple as possible, so you can start with the most basic configuration and then move on to more advanced configuration.
+We try to keep this project as simple as possible, so you can start with just the scaffolding we set up for you, and add additional things later when they become necessary.
 
 If you are not familiar with the different technologies used in this project, please refer to the respective docs. If you still are in the wind, please join our [Discord](https://t3.gg/discord) and ask for help.
 
-- [Next-Auth.js](https://next-auth.js.org)
+- [Next.js](https://nextjs.org)
+- [NextAuth.js](https://next-auth.js.org)
 - [Prisma](https://prisma.io)
-- [TailwindCSS](https://tailwindcss.com)
-- [tRPC](https://trpc.io) (using @next version? [see v10 docs here](https://alpha.trpc.io))
-
-Also checkout these awesome tutorials on `create-t3-app`.
-
-- [Build a Blog With the T3 Stack - tRPC, TypeScript, Next.js, Prisma & Zod](https://www.youtube.com/watch?v=syEWlxVFUrY)
-- [Build a Live Chat Application with the T3 Stack - TypeScript, Tailwind, tRPC](https://www.youtube.com/watch?v=dXRRY37MPuk)
-- [Build a full stack app with create-t3-app](https://www.nexxel.dev/blog/ct3a-guestbook)
-- [A first look at create-t3-app](https://dev.to/ajcwebdev/a-first-look-at-create-t3-app-1i8f)
-
-## How do I deploy this?
-
-### Vercel
-
-We recommend deploying to [Vercel](https://vercel.com/?utm_source=t3-oss&utm_campaign=oss). It makes it super easy to deploy NextJs apps.
-
-- Push your code to a GitHub repository.
-- Go to [Vercel](https://vercel.com/?utm_source=t3-oss&utm_campaign=oss) and sign up with GitHub.
-- Create a Project and import the repository you pushed your code to.
-- Add your environment variables.
-- Click **Deploy**
-- Now whenever you push a change to your repository, Vercel will automatically redeploy your website!
-
-### Docker
-
-You can also dockerize this stack and deploy a container.
-
-Please note that Next.js requires a different process for buildtime (available in the frontend, prefixed by `NEXT_PUBLIC`) and runtime environment, server-side only, variables. In this demo we are using two variables, `DATABASE_URL` (used by the server) and `NEXT_PUBLIC_CLIENTVAR` (used by the client). Pay attention to their positions in the `Dockerfile`, command-line arguments, and `docker-compose.yml`.
-
-1. In your [next.config.mjs](./next.config.mjs), add the `standalone` output-option to your config:
-
-   ```diff
-     export default defineNextConfig({
-       reactStrictMode: true,
-       swcMinify: true,
-   +   output: "standalone",
-     });
-   ```
-
-2. Remove the `env`-import from [next.config.mjs](./next.config.mjs):
-
-   ```diff
-   - import { env } from "./src/env/server.mjs";
-   ```
-
-3. Create a `.dockerignore` file with the following contents:
-   <details>
-   <summary>.dockerignore</summary>
-
-   ```
-   .env
-   Dockerfile
-   .dockerignore
-   node_modules
-   npm-debug.log
-   README.md
-   .next
-   .git
-   ```
-
-  </details>
-
-4. Create a `Dockerfile` with the following contents:
-   <details>
-   <summary>Dockerfile</summary>
-
-   ```Dockerfile
-   ########################
-   #         DEPS         #
-   ########################
-
-   # Install dependencies only when needed
-   # TODO: re-evaluate if emulation is still necessary on arm64 after moving to node 18
-   FROM --platform=linux/amd64 node:16-alpine AS deps
-   # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
-   RUN apk add --no-cache libc6-compat openssl
-   WORKDIR /app
-
-   # Install Prisma Client - remove if not using Prisma
-   COPY prisma ./
-
-   # Install dependencies based on the preferred package manager
-   COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
-   RUN \
-     if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
-     elif [ -f package-lock.json ]; then npm ci; \
-     elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
-     else echo "Lockfile not found." && exit 1; \
-     fi
-
-   ########################
-   #        BUILDER       #
-   ########################
-
-   # Rebuild the source code only when needed
-   # TODO: re-evaluate if emulation is still necessary on arm64 after moving to node 18
-   FROM --platform=linux/amd64 node:16-alpine AS builder
+- [Tailwind CSS](https://tailwindcss.com)
+- [tRPC](https://trpc.io)
 
-   ARG DATABASE_URL
-   ARG NEXT_PUBLIC_CLIENTVAR
+## Learn More
 
-   WORKDIR /app
-   COPY --from=deps /app/node_modules ./node_modules
-   COPY . .
+To learn more about the [T3 Stack](https://create.t3.gg/), take a look at the following resources:
 
-   # Next.js collects completely anonymous telemetry data about general usage.
-   # Learn more here: https://nextjs.org/telemetry
-   # Uncomment the following line in case you want to disable telemetry during the build.
-   # ENV NEXT_TELEMETRY_DISABLED 1
+- [Documentation](https://create.t3.gg/)
+- [Learn the T3 Stack](https://create.t3.gg/en/faq#what-learning-resources-are-currently-available) — Check out these awesome tutorials
 
-   RUN \
-     if [ -f yarn.lock ]; then yarn build; \
-     elif [ -f package-lock.json ]; then npm run build; \
-     elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm run build; \
-     else echo "Lockfile not found." && exit 1; \
-     fi
+You can check out the [create-t3-app GitHub repository](https://github.com/t3-oss/create-t3-app) — your feedback and contributions are welcome!
 
-   ########################
-   #        RUNNER        #
-   ########################
-
-   # Production image, copy all the files and run next
-   # TODO: re-evaluate if emulation is still necessary after moving to node 18
-   FROM --platform=linux/amd64 node:16-alpine AS runner
-   # WORKDIR /usr/app
-   WORKDIR /app
-
-   ENV NODE_ENV production
-   # Uncomment the following line in case you want to disable telemetry during runtime.
-   # ENV NEXT_TELEMETRY_DISABLED 1
-
-   RUN addgroup --system --gid 1001 nodejs
-   RUN adduser --system --uid 1001 nextjs
-
-   COPY --from=builder /app/next.config.mjs ./
-   COPY --from=builder /app/public ./public
-   COPY --from=builder /app/package.json ./package.json
-
-   # Automatically leverage output traces to reduce image size
-   # https://nextjs.org/docs/advanced-features/output-file-tracing
-   COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
-   COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
-
-   USER nextjs
-
-   EXPOSE 3000
-
-   ENV PORT 3000
-
-   CMD ["node", "server.js"]
-   ```
-
-  </details>
-
-5. To build and run this image locally, run:
-
-   ```bash
-   docker build -t ct3a -e NEXT_PUBLIC_CLIENTVAR=clientvar .
-   docker run -p 3000:3000 -e DATABASE_URL="database_url_goes_here" ct3a
-   ```
-
-6. You can also use a PaaS such as [Railway's](https://railway.app) automated [Dockerfile deployments](https://docs.railway.app/deploy/dockerfiles) to deploy your app.
-
-### Docker Compose
-
-You can also use docker compose to build the image and run the container.
-
-1. Follow steps 1-4 above
-
-2. Create a `docker-compose.yml` file with the following:
-
-   <details>
-   <summary>docker-compose.yml</summary>
-
-   ```yaml
-   version: "3.9"
-   services:
-     app:
-       platform: "linux/amd64"
-       build:
-         context: .
-         dockerfile: Dockerfile
-         args:
-           NEXT_PUBLIC_CLIENTVAR: "clientvar"
-       working_dir: /app
-       ports:
-         - "3000:3000"
-       image: t3-app
-       environment:
-         - DATABASE_URL=database_url_goes_here
-   ```
-
-   </details>
-
-3. Run this using `docker compose up`.
-
-### Further reading
-
-Here are some useful references you can further look into:
-
-- [Dockerfile reference](https://docs.docker.com/engine/reference/builder/)
-- [Compose file version 3 reference](https://docs.docker.com/compose/compose-file/compose-file-v3/)
-- [Docker CLI reference](https://docs.docker.com/engine/reference/commandline/docker/)
-- [Docker Compose CLI reference](https://docs.docker.com/compose/reference/)
-
-## Useful resources
-
-Here are some resources that we commonly refer to:
+## How do I deploy this?
 
-- [Protecting routes with Next-Auth.js](https://next-auth.js.org/configuration/nextjs#unstable_getserversession)
+Follow our deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.
diff --git a/next.config.mjs b/next.config.mjs
index d5988e7..b5bef6c 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -1,23 +1,17 @@
-import { env } from "./src/env/server.mjs";
-
+// @ts-check
 /**
- * Don't be scared of the generics here.
- * All they do is to give us autocompletion when using this.
- *
- * @template {import('next').NextConfig} T
- * @param {T} config - A generic parameter that flows through to the return type
- * @constraint {{import('next').NextConfig}}
+ * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
+ * This is especially useful for Docker builds.
  */
-function defineNextConfig(config) {
-  return config;
-}
+!process.env.SKIP_ENV_VALIDATION && (await import("./src/env/server.mjs"));
 
-export default defineNextConfig({
+/** @type {import("next").NextConfig} */
+const config = {
   reactStrictMode: true,
   swcMinify: true,
-  // Next.js i18n docs: https://nextjs.org/docs/advanced-features/i18n-routing
   i18n: {
     locales: ["en"],
     defaultLocale: "en",
   },
-});
+};
+export default config;
diff --git a/package.json b/package.json
index 7988d32..018a96d 100644
--- a/package.json
+++ b/package.json
@@ -1,30 +1,39 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
-    "dev": "next dev",
     "build": "next build",
-    "start": "next start",
-    "lint": "next lint"
+    "dev": "next dev",
+    "postinstall": "prisma generate",
+    "lint": "next lint",
+    "start": "next start"
   },
   "dependencies": {
-    "next": "12.2.5",
+    "@prisma/client": "^4.5.0",
+    "@tanstack/react-query": "^4.16.0",
+    "@trpc/client": "^10.0.0",
+    "@trpc/next": "^10.0.0",
+    "@trpc/react-query": "^10.0.0",
+    "@trpc/server": "^10.0.0",
+    "next": "13.0.2",
     "react": "18.2.0",
     "react-dom": "18.2.0",
+    "superjson": "1.9.1",
     "zod": "^3.18.0"
   },
   "devDependencies": {
-    "@types/node": "18.0.0",
-    "@types/react": "18.0.14",
-    "@types/react-dom": "18.0.5",
+    "@types/node": "^18.0.0",
+    "@types/react": "^18.0.14",
+    "@types/react-dom": "^18.0.5",
     "@typescript-eslint/eslint-plugin": "^5.33.0",
     "@typescript-eslint/parser": "^5.33.0",
-    "eslint": "8.22.0",
-    "eslint-config-next": "12.2.5",
-    "typescript": "4.7.4"
+    "eslint": "^8.26.0",
+    "eslint-config-next": "13.0.2",
+    "prisma": "^4.5.0",
+    "typescript": "^4.8.4"
   },
   "ct3aMetadata": {
-    "initVersion": "5.12.0"
+    "initVersion": "6.10.3"
   }
 }
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
new file mode 100644
index 0000000..06dc8cd
--- /dev/null
+++ b/prisma/schema.prisma
@@ -0,0 +1,17 @@
+// This is your Prisma schema file,
+// learn more about it in the docs: https://pris.ly/d/prisma-schema
+
+generator client {
+  provider = "prisma-client-js"
+}
+
+datasource db {
+  provider = "sqlite"
+  url      = env("DATABASE_URL")
+}
+
+model Example {
+  id        String   @id @default(cuid())
+  createdAt DateTime @default(now())
+  updatedAt DateTime @updatedAt
+}
diff --git a/public/favicon.ico b/public/favicon.ico
index d3b456c..efd76f1 100644
Binary files a/public/favicon.ico and b/public/favicon.ico differ
diff --git a/src/env/client.mjs b/src/env/client.mjs
index f64d931..30958cb 100644
--- a/src/env/client.mjs
+++ b/src/env/client.mjs
@@ -14,7 +14,7 @@ export const formatErrors = (
     })
     .filter(Boolean);
 
-if (_clientEnv.success === false) {
+if (!_clientEnv.success) {
   console.error(
     "❌ Invalid environment variables:\n",
     ...formatErrors(_clientEnv.error.format()),
@@ -22,9 +22,6 @@ if (_clientEnv.success === false) {
   throw new Error("Invalid environment variables");
 }
 
-/**
- * Validate that client-side environment variables are exposed to the client.
- */
 for (let key of Object.keys(_clientEnv.data)) {
   if (!key.startsWith("NEXT_PUBLIC_")) {
     console.warn(
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
index c621d13..db72a63 100644
--- a/src/env/schema.mjs
+++ b/src/env/schema.mjs
@@ -6,6 +6,7 @@ import { z } from "zod";
  * This way you can ensure the app isn't built with invalid env vars.
  */
 export const serverSchema = z.object({
+  DATABASE_URL: z.string().url(),
   NODE_ENV: z.enum(["development", "test", "production"]),
 });
 
@@ -15,7 +16,7 @@ export const serverSchema = z.object({
  * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
  */
 export const clientSchema = z.object({
-  // NEXT_PUBLIC_CLIENTVAR: z.string(),
+  // NEXT_PUBLIC_BAR: z.string(),
 });
 
 /**
@@ -25,5 +26,5 @@ export const clientSchema = z.object({
  * @type {{ [k in keyof z.infer<typeof clientSchema>]: z.infer<typeof clientSchema>[k] | undefined }}
  */
 export const clientEnv = {
-  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
+  // NEXT_PUBLIC_BAR: process.env.NEXT_PUBLIC_BAR,
 };
diff --git a/src/env/server.mjs b/src/env/server.mjs
index 22c6983..736e3a6 100644
--- a/src/env/server.mjs
+++ b/src/env/server.mjs
@@ -8,7 +8,7 @@ import { env as clientEnv, formatErrors } from "./client.mjs";
 
 const _serverEnv = serverSchema.safeParse(process.env);
 
-if (_serverEnv.success === false) {
+if (!_serverEnv.success) {
   console.error(
     "❌ Invalid environment variables:\n",
     ...formatErrors(_serverEnv.error.format()),
@@ -16,9 +16,6 @@ if (_serverEnv.success === false) {
   throw new Error("Invalid environment variables");
 }
 
-/**
- * Validate that server-side environment variables are not exposed to the client.
- */
 for (let key of Object.keys(_serverEnv.data)) {
   if (key.startsWith("NEXT_PUBLIC_")) {
     console.warn("❌ You are exposing a server-side env-variable:", key);
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index c1c9d2f..93ad12b 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -1,8 +1,11 @@
+import { type AppType } from "next/app";
+
+import { trpc } from "../utils/trpc";
+
 import "../styles/globals.css";
-import type { AppType } from "next/dist/shared/lib/utils";
 
 const MyApp: AppType = ({ Component, pageProps }) => {
   return <Component {...pageProps} />;
 };
 
-export default MyApp;
+export default trpc.withTRPC(MyApp);
diff --git a/src/pages/api/examples.ts b/src/pages/api/examples.ts
new file mode 100644
index 0000000..c0889f5
--- /dev/null
+++ b/src/pages/api/examples.ts
@@ -0,0 +1,10 @@
+import { type NextApiRequest, type NextApiResponse } from "next";
+
+import { prisma } from "../../server/db/client";
+
+const examples = async (req: NextApiRequest, res: NextApiResponse) => {
+  const examples = await prisma.example.findMany();
+  res.status(200).json(examples);
+};
+
+export default examples;
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
new file mode 100644
index 0000000..f69201d
--- /dev/null
+++ b/src/pages/api/trpc/[trpc].ts
@@ -0,0 +1,17 @@
+import { createNextApiHandler } from "@trpc/server/adapters/next";
+
+import { env } from "../../../env/server.mjs";
+import { createContext } from "../../../server/trpc/context";
+import { appRouter } from "../../../server/trpc/router/_app";
+
+// export API handler
+export default createNextApiHandler({
+  router: appRouter,
+  createContext,
+  onError:
+    env.NODE_ENV === "development"
+      ? ({ path, error }) => {
+          console.error(`❌ tRPC failed on ${path}: ${error}`);
+        }
+      : undefined,
+});
diff --git a/src/pages/index.module.css b/src/pages/index.module.css
index 4fc3217..d9caeea 100644
--- a/src/pages/index.module.css
+++ b/src/pages/index.module.css
@@ -1,196 +1,149 @@
-.containerOuter {
-  --color-gray-500: rgba(107, 114, 128, 100%);
-  --color-gray-600: rgba(75, 85, 99, 100%);
-  --color-gray-700: rgba(55, 65, 81, 100%);
-  --color-purple-300: rgba(216, 180, 254, 100%);
-  --color-blue-500: rgba(59, 130, 246, 100%);
-  --color-violet-500: rgba(139, 92, 246, 100%);
-  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1),
-    0 8px 10px -6px rgb(0 0 0 / 0.1);
-
+.main {
   display: flex;
+  flex-direction: column;
   align-items: center;
   justify-content: center;
-  width: 100vw;
   min-height: 100vh;
+  background-image: linear-gradient(to bottom, #2e026d, #15162c);
 }
 
-.containerInner {
+.container {
   width: 100%;
-  min-height: 100vh;
-  padding: 16px;
   display: flex;
   flex-direction: column;
   align-items: center;
   justify-content: center;
-  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
-    "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,
-    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
+  gap: 3rem;
+  padding: 4rem 1rem;
 }
 
 @media (min-width: 640px) {
-  .containerInner {
+  .container {
     max-width: 640px;
   }
 }
 
 @media (min-width: 768px) {
-  .containerInner {
+  .container {
     max-width: 768px;
   }
 }
 
 @media (min-width: 1024px) {
-  .containerInner {
+  .container {
     max-width: 1024px;
   }
 }
 
 @media (min-width: 1280px) {
-  .containerInner {
+  .container {
     max-width: 1280px;
   }
 }
 
 @media (min-width: 1536px) {
-  .containerInner {
+  .container {
     max-width: 1536px;
   }
 }
 
 .title {
-  margin: 0;
   font-size: 3rem;
+  line-height: 1;
   font-weight: 800;
-  line-height: 1.5;
-  color: var(--color-gray-700);
+  letter-spacing: -0.025em;
+  margin: 0;
+  color: white;
 }
 
-@media (min-width: 768px) {
+@media (min-width: 640px) {
   .title {
     font-size: 5rem;
   }
 }
 
-.titlePink {
-  color: var(--color-purple-300);
-}
-
-.subtitle {
-  margin: 0;
-  color: var(--color-gray-700);
-  font-weight: 400;
-  font-size: 1.5rem;
-  line-height: 2rem;
+.pinkSpan {
+  color: hsl(280 100% 70%);
 }
 
-.cardGrid {
+.cardRow {
   display: grid;
-  gap: 0.75rem;
-  padding-top: 0.75rem;
-  margin-top: 0.75rem;
-  text-align: center;
+  grid-template-columns: repeat(1, minmax(0, 1fr));
+  gap: 1rem;
 }
 
-@media (min-width: 768px) {
-  .cardGrid {
+@media (min-width: 640px) {
+  .cardRow {
     grid-template-columns: repeat(2, minmax(0, 1fr));
   }
 }
 
-@media (min-width: 1024px) {
-  .cardGrid {
-    width: calc(200% / 3);
+@media (min-width: 768px) {
+  .cardRow {
+    gap: 2rem;
   }
 }
 
 .card {
+  max-width: 20rem;
   display: flex;
   flex-direction: column;
-  justify-content: center;
-  padding: 1.5rem;
-  transition-duration: 500ms;
-  border: 2px solid var(--color-gray-500);
-  border-radius: 0.25rem;
-  box-shadow: var(--tw-shadow);
+  gap: 1rem;
+  padding: 1rem;
+  border-radius: 0.75rem;
+  color: white;
+  background-color: rgb(255 255 255 / 0.1);
 }
 
 .card:hover {
-  transform: scale(1.05);
-}
-
-@media (prefers-reduced-motion) {
-  .card:hover {
-    transform: none;
-  }
+  background-color: rgb(255 255 255 / 0.2);
+  transition: background-color 150ms cubic-bezier(0.5, 0, 0.2, 1);
 }
 
 .cardTitle {
+  font-size: 1.5rem;
+  line-height: 2rem;
+  font-weight: 700;
   margin: 0;
-  font-size: 1.125rem;
-  line-height: 1.75rem;
-  font-weight: 400;
-  color: var(--color-gray-500);
-}
-
-.cardDescription {
-  margin: 0;
-  font-size: 0.875rem;
-  line-height: 1.25rem;
-  color: var(--color-gray-600);
 }
 
-.cardDocumentation {
-  margin-top: 0.75rem;
-  font-size: 0.875rem;
-  line-height: 1.25rem;
-  text-decoration-line: underline;
-  -webkit-text-decoration-line: underline;
-  text-decoration-style: dotted;
-  -webkit-text-decoration-style: dotted;
-  text-underline-offset: 2px;
-  color: var(--color-violet-500);
+.cardText {
+  font-size: 1.125rem;
+  line-height: 1.75rem;
 }
 
-.helloFrom {
-  padding-top: 1.5rem;
-  font-size: 1.5rem;
-  line-height: 2rem;
-  color: var(--color-blue-500);
+.showcaseContainer {
   display: flex;
+  flex-direction: column;
   align-items: center;
-  justify-content: center;
-  width: 100%;
+  gap: 0.5rem;
 }
 
-.helloFrom p {
-  margin: 0;
+.showcaseText {
+  color: white;
+  text-align: center;
+  font-size: 1.5rem;
+  line-height: 2rem;
 }
 
-.authShowcase {
-  margin: 2rem;
+.authContainer {
   display: flex;
   flex-direction: column;
   align-items: center;
-  gap: 16px;
-}
-
-.loginInfo {
-  color: var(--color-blue-500);
-  font-size: 1.5rem;
-  line-height: 2rem;
+  justify-content: center;
+  gap: 1rem;
 }
 
-.signInButton {
-  padding: 0.5rem 1rem;
-  border: 1px solid black;
-  background-color: rgba(245, 243, 255, 100%);
-  font-size: 1.25rem;
-  line-height: 1.75rem;
-  border-radius: 0.375rem;
-  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
+.loginButton {
+  border-radius: 9999px;
+  background-color: rgb(255 255 255 / 0.1);
+  padding: 0.75rem 2.5rem;
+  font-weight: 600;
+  color: white;
+  text-decoration-line: none;
+  transition: background-color 150ms cubic-bezier(0.5, 0, 0.2, 1);
 }
 
-.signInButton:hover {
-  background-color: rgba(237, 233, 254, 100%);
+.loginButton:hover {
+  background-color: rgb(255 255 255 / 0.2);
 }
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 173337b..e7b9d82 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -1,8 +1,13 @@
-import type { NextPage } from "next";
-import Head from "next/head";
 import styles from "./index.module.css";
+import { type NextPage } from "next";
+import Head from "next/head";
+import Link from "next/link";
+
+import { trpc } from "../utils/trpc";
 
 const Home: NextPage = () => {
+  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
+
   return (
     <>
       <Head>
@@ -10,76 +15,40 @@ const Home: NextPage = () => {
         <meta name="description" content="Generated by create-t3-app" />
         <link rel="icon" href="/favicon.ico" />
       </Head>
-      <div className={styles.containerOuter}>
-        <div className={styles.containerInner}>
+      <main className={styles.main}>
+        <div className={styles.container}>
           <h1 className={styles.title}>
-            Create <span className={styles.titlePink}>T3</span> App
+            Create <span className={styles.pinkSpan}>T3</span> App
           </h1>
-
-          <h3 className={styles.subtitle}>This stack uses:</h3>
-          <div className={styles.cardGrid}>
-            <TechnologyCard
-              name="NextJS"
-              description="The React framework for production"
-              documentation="https://nextjs.org/"
-            />
-            <TechnologyCard
-              name="TypeScript"
-              description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
-              documentation="https://www.typescriptlang.org/"
-            />
-            <TechnologyCard
-              name="TailwindCSS"
-              description="Rapidly build modern websites without ever leaving your HTML"
-              documentation="https://tailwindcss.com/"
-            />
-            <TechnologyCard
-              name="tRPC"
-              description="End-to-end typesafe APIs made easy"
-              documentation="https://trpc.io/"
-            />
-            <TechnologyCard
-              name="Next-Auth"
-              description="Authentication for Next.js"
-              documentation="https://next-auth.js.org/"
-            />
-            <TechnologyCard
-              name="Prisma"
-              description="Build data-driven JavaScript & TypeScript apps in less time"
-              documentation="https://www.prisma.io/docs/"
-            />
+          <div className={styles.cardRow}>
+            <Link
+              className={styles.card}
+              href="https://create.t3.gg/en/usage/first-steps"
+            >
+              <h3 className={styles.cardTitle}>First Steps →</h3>
+              <div className={styles.cardText}>
+                Just the basics - Everything you need to know to set up your
+                database and authentication.
+              </div>
+            </Link>
+            <Link
+              className={styles.card}
+              href="https://create.t3.gg/en/introduction"
+            >
+              <h3 className={styles.cardTitle}>Documentation →</h3>
+              <div className={styles.cardText}>
+                Learn more about Create T3 App, the libraries it uses, and how
+                to deploy it.
+              </div>
+            </Link>
           </div>
+          <p className={styles.showcaseText}>
+            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
+          </p>
         </div>
-      </div>
+      </main>
     </>
   );
 };
 
 export default Home;
-
-type TechnologyCardProps = {
-  name: string;
-  description: string;
-  documentation: string;
-};
-
-const TechnologyCard = ({
-  name,
-  description,
-  documentation,
-}: TechnologyCardProps) => {
-  return (
-    <section className={styles.card}>
-      <h2 className={styles.cardTitle}>{name}</h2>
-      <p className={styles.cardDescription}>{description}</p>
-      <a
-        className={styles.cardDocumentation}
-        href={documentation}
-        target="_blank"
-        rel="noreferrer"
-      >
-        Documentation
-      </a>
-    </section>
-  );
-};
diff --git a/src/server/db/client.ts b/src/server/db/client.ts
new file mode 100644
index 0000000..0c3d234
--- /dev/null
+++ b/src/server/db/client.ts
@@ -0,0 +1,19 @@
+import { PrismaClient } from "@prisma/client";
+
+import { env } from "../../env/server.mjs";
+
+declare global {
+  // eslint-disable-next-line no-var
+  var prisma: PrismaClient | undefined;
+}
+
+export const prisma =
+  global.prisma ||
+  new PrismaClient({
+    log:
+      env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
+  });
+
+if (env.NODE_ENV !== "production") {
+  global.prisma = prisma;
+}
diff --git a/src/server/trpc/context.ts b/src/server/trpc/context.ts
new file mode 100644
index 0000000..873dc9d
--- /dev/null
+++ b/src/server/trpc/context.ts
@@ -0,0 +1,30 @@
+import { type inferAsyncReturnType } from "@trpc/server";
+import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
+
+import { prisma } from "../db/client";
+
+/**
+ * Replace this with an object if you want to pass things to createContextInner
+ */
+type CreateContextOptions = Record<string, never>;
+
+/** Use this helper for:
+ * - testing, so we dont have to mock Next.js' req/res
+ * - trpc's `createSSGHelpers` where we don't have req/res
+ * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
+ **/
+export const createContextInner = async (opts: CreateContextOptions) => {
+  return {
+    prisma,
+  };
+};
+
+/**
+ * This is the actual context you'll use in your router
+ * @link https://trpc.io/docs/context
+ **/
+export const createContext = async (opts: CreateNextContextOptions) => {
+  return await createContextInner({});
+};
+
+export type Context = inferAsyncReturnType<typeof createContext>;
diff --git a/src/server/trpc/router/_app.ts b/src/server/trpc/router/_app.ts
new file mode 100644
index 0000000..673135d
--- /dev/null
+++ b/src/server/trpc/router/_app.ts
@@ -0,0 +1,9 @@
+import { router } from "../trpc";
+import { exampleRouter } from "./example";
+
+export const appRouter = router({
+  example: exampleRouter,
+});
+
+// export type definition of API
+export type AppRouter = typeof appRouter;
diff --git a/src/server/trpc/router/example.ts b/src/server/trpc/router/example.ts
new file mode 100644
index 0000000..b736705
--- /dev/null
+++ b/src/server/trpc/router/example.ts
@@ -0,0 +1,16 @@
+import { z } from "zod";
+
+import { router, publicProcedure } from "../trpc";
+
+export const exampleRouter = router({
+  hello: publicProcedure
+    .input(z.object({ text: z.string().nullish() }).nullish())
+    .query(({ input }) => {
+      return {
+        greeting: `Hello ${input?.text ?? "world"}`,
+      };
+    }),
+  getAll: publicProcedure.query(({ ctx }) => {
+    return ctx.prisma.example.findMany();
+  }),
+});
diff --git a/src/server/trpc/trpc.ts b/src/server/trpc/trpc.ts
new file mode 100644
index 0000000..b4a9527
--- /dev/null
+++ b/src/server/trpc/trpc.ts
@@ -0,0 +1,15 @@
+import { initTRPC } from "@trpc/server";
+import superjson from "superjson";
+
+import { type Context } from "./context";
+
+const t = initTRPC.context<Context>().create({
+  transformer: superjson,
+  errorFormatter({ shape }) {
+    return shape;
+  },
+});
+
+export const router = t.router;
+
+export const publicProcedure = t.procedure;
diff --git a/src/utils/trpc.ts b/src/utils/trpc.ts
new file mode 100644
index 0000000..2391cbc
--- /dev/null
+++ b/src/utils/trpc.ts
@@ -0,0 +1,42 @@
+import { httpBatchLink, loggerLink } from "@trpc/client";
+import { createTRPCNext } from "@trpc/next";
+import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
+import superjson from "superjson";
+
+import { type AppRouter } from "../server/trpc/router/_app";
+
+const getBaseUrl = () => {
+  if (typeof window !== "undefined") return ""; // browser should use relative url
+  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`; // SSR should use vercel url
+  return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
+};
+
+export const trpc = createTRPCNext<AppRouter>({
+  config() {
+    return {
+      transformer: superjson,
+      links: [
+        loggerLink({
+          enabled: (opts) =>
+            process.env.NODE_ENV === "development" ||
+            (opts.direction === "down" && opts.result instanceof Error),
+        }),
+        httpBatchLink({
+          url: `${getBaseUrl()}/api/trpc`,
+        }),
+      ],
+    };
+  },
+  ssr: false,
+});
+
+/**
+ * Inference helper for inputs
+ * @example type HelloInput = RouterInputs['example']['hello']
+ **/
+export type RouterInputs = inferRouterInputs<AppRouter>;
+/**
+ * Inference helper for outputs
+ * @example type HelloOutput = RouterOutputs['example']['hello']
+ **/
+export type RouterOutputs = inferRouterOutputs<AppRouter>;
diff --git a/tsconfig.json b/tsconfig.json
index 0608fd0..658068a 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,6 +1,6 @@
 {
   "compilerOptions": {
-    "target": "es5",
+    "target": "es2017",
     "lib": ["dom", "dom.iterable", "esnext"],
     "allowJs": true,
     "skipLibCheck": true,
